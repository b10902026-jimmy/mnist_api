# -*- coding: utf-8 -*-
"""Number_Inference_Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XuQS7Jn7Ca5PE6KeeE5Ra5kBA5q_myhe
"""
import numpy as np
import cv2
import time


from keras.models import load_model
model = load_model('./Saved_model/jimmy_model.h5')
#model.summary()
model.load_weights('./Saved_model/jimmy_model.h5')

#如果 load_model 有錯誤訊息, 請檢查 keras 和 tensorflow 的版本.
#建議使用 keras 2.2.4, tensorflow 1.8.0 or 1.12.0



tStart = time.time() #計時開始
#base64編碼
'''imgae_path='/home/jimmy/python/opencv/testimage/20221008_162608.jpg'
img_file = open(imgae_path,'rb')
img_b64encode = base64.b64encode(img_file.read())
img_b64encode = str(img_b64encode,'utf-8')
myDict= {
    "picture": img_b64encode
}


with open ("output.json","w") as f:
    json.dump(myDict,f,indent=2)

base64解碼
img_b64decode = base64.b64decode(img_b64encode)
img_nparray = np.frombuffer(img_b64decode,np.uint8)
img_1 = cv2.imdecode(img_nparray,cv2.IMREAD_COLOR)"""

img_1 = cv2.imread('/home/jimmy/python/opencv/testimage/20221008_162528.jpg',1)'''


def predict(input_img):
    img = cv2.resize(input_img,(640,480),1)
    img_2 = img[0:480,80:560]
    #print(np.shape(img_2))
    #cv2.imshow('Camera',img_2)
    
    img_2_gray = cv2.cvtColor(img_2, cv2.COLOR_BGR2GRAY)
    img_3 = 255 - img_2_gray
    img_3 = img_3.astype('float32')
    img_3_min = np.amin(img_3)
    img_4 = img_3 - img_3_min
    img_5 = 255 * img_4 / (np.amax(img_4))
    kernel = np.ones((5,5),np.uint8)
    img_6 = cv2.dilate(img_5,kernel,iterations = 3)
    img_7 = cv2.resize(img_6,(28,28),1)
    #img_8 = img_6.astype('uint8')
    #cv2.imshow('input',img_8)
    x_test_image = np.reshape(img_7, (1,28,28))
    #print(np.amax(x_test_image))
    #print(np.amin(x_test_image))
    # convert 2-D 28x28 image to 4-D nx28x28x1  array
    x_Test4D=x_test_image.reshape(x_test_image.shape[0],28,28,1).astype('float32')
    # normalize the image numbers to 0~1
    x_Test4D_normalize = (x_Test4D / np.amax(x_test_image))
    #print(x_Test4D_normalize.shape)
    predict_x=model.predict(x_Test4D_normalize)
    prediction=np.argmax(predict_x,axis=1)

    return int(prediction)


tEnd = time.time() #計時結束

"""filename = '%s%d%s' % ('/home/jimmy/python/opencv/numbers/number_', prediction, '.JPG')
img_9 = cv2.imread(filename)
img_10 = cv2.resize(img_9,(480,480),1)
#cv2.imshow('inference',img_10)

while(True):
    if cv2.waitKey(1) & 0xFF == ord('q'):
        cv2.imwrite('output.jpg', img_2)
        break
cv2.destroyAllWindows()"""




print('It takes %f sec for the frame' % (tEnd - tStart))